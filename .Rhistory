df <- data.frame()
for(i in h){
if(is_empty(df)){
df <- i %>% summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers)
} else{
df <- df %>% rbind(i %>% summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers))
}
}
df <- df %>% mutate(day = 1:nrow(df))
df <- df %>% select(day,confirms,deaths,recovers,active)
return(df)
}
else {
print("No data on this location yet --OR-- Type the location differently")
return(NULL)
}
# Looking for and returning a particular location
df <- data.frame()
for(i in h){
if(is_empty(df)){
df <- i %>% filter(grepl(location,i[[geopol]])) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers)
} else{
df <- df %>% rbind(i %>% filter(grepl(location,i[[geopol]])) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers))
}
}
df <- df %>% mutate(day = 1:nrow(df))
df <- df %>% select(day,confirms,deaths,recovers,active)
return(df)
}
track()
rm(list =ls())
#--Tracking Function--#
# For any un/specified location
# Requires source("pipe1.R") to be run
# Creates a day by day summary table for a given location
# returns a list( 1 data.frame with nrow = days, 1 plottable df)
#
track <- function(location = 'earth'){
countryList <- unique(union(t()[["Country/Region"]],h[[1]][["Country/Region"]]))
stateList <- unique(union(t()[["Province/State"]],h[[1]][["Province/State"]]))
geopol <- NULL
if(location %in% countryList){
geopol <- "Country/Region"
}
else if(location %in% stateList){
geopol <- "Province/State"
}
else if(location == 'earth'){
df <- data.frame()
for(i in h){
if(is_empty(df)){
df <- i %>% summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers)
} else {
df <- df %>% rbind(i %>% summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers))
}
}
df <- df %>% mutate(day = 1:nrow(df))
df <- df %>% select(day,confirms,deaths,recovers,active)
return(df)
}
else {
print("No data on this location yet --OR-- Type the location differently")
return(NULL)
}
# Looking for and returning a particular location
df <- data.frame()
for(i in h){
if(is_empty(df)){
df <- i %>% filter(grepl(location,i[[geopol]])) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers)
} else{
df <- df %>% rbind(i %>% filter(grepl(location,i[[geopol]])) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers))
}
}
df <- df %>% mutate(day = 1:nrow(df))
df <- df %>% select(day,confirms,deaths,recovers,active)
return(df)
}
track("China")
View(track)
View(track)
View(track)
View(track)
View(track)
View(track)
View(track)
View(track)
View(track)
View(track)
#--Tracking Function--#
# For any un/specified location
# Requires source("pipe1.R") to be run
# Creates a day by day summary table for a given location
# returns a list( 1 data.frame with nrow = days, 1 plottable df)
#
track <- function(location = 'earth'){
countryList <- unique(union(t()[["Country/Region"]],h[[1]][["Country/Region"]]))
stateList <- unique(union(t()[["Province/State"]],h[[1]][["Province/State"]]))
geopol <- NULL
if(location %in% countryList){
geopol <- "Country/Region"
}
else if(location %in% stateList){
geopol <- "Province/State"
}
else if(location == 'earth'){
}
else {
print("No data on this location yet --OR-- Type the location differently")
return(NULL)
}
# Looking for and returning a particular location
df <- data.frame()
for(i in h){
if(is_empty(df)){
df <- i %>% filter(grepl(location,i[[geopol]])) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers)
} else{
df <- df %>% rbind(i %>% filter(grepl(location,i[[geopol]])) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers))
}
}
df <- df %>% mutate(day = 1:nrow(df))
df <- df %>% select(day,confirms,deaths,recovers,active)
return(df)
}
#--Tracking Function--#
# For any un/specified location
# Requires source("pipe1.R") to be run
# Creates a day by day summary table for a given location
# returns a list( 1 data.frame with nrow = days, 1 plottable df)
#
track <- function(location = 'earth'){
countryList <- unique(union(t()[["Country/Region"]],h[[1]][["Country/Region"]]))
stateList <- unique(union(t()[["Province/State"]],h[[1]][["Province/State"]]))
geopol <- NULL
if(location %in% countryList){
geopol <- "Country/Region"
}
else if(location %in% stateList){
geopol <- "Province/State"
}
else if(location == 'earth'){
print(1)
}
else {
print("No data on this location yet --OR-- Type the location differently")
return(NULL)
}
# Looking for and returning a particular location
df <- data.frame()
for(i in h){
if(is_empty(df)){
df <- i %>% filter(grepl(location,i[[geopol]])) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers)
} else{
df <- df %>% rbind(i %>% filter(grepl(location,i[[geopol]])) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers))
}
}
df <- df %>% mutate(day = 1:nrow(df))
df <- df %>% select(day,confirms,deaths,recovers,active)
return(df)
}
track()
#--Tracking Function--#
# For any un/specified location
# Requires source("pipe1.R") to be run
# Creates a day by day summary table for a given location
# returns a list( 1 data.frame with nrow = days, 1 plottable df)
#
track <- function(location = 'earth'){
countryList <- unique(union(t()[["Country/Region"]],h[[1]][["Country/Region"]]))
stateList <- unique(union(t()[["Province/State"]],h[[1]][["Province/State"]]))
geopol <- NULL
if(location %in% countryList){
geopol <- "Country/Region"
}
else if(location %in% stateList){
geopol <- "Province/State"
}
else if(location == 'earth'){
df <- data.frame()
for(i in h){
if(is_empty(df)){
df <- i %>% summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers)
} else {
df <- df %>% rbind(i %>% summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers))
}
}
df <- df %>% mutate(day = 1:nrow(df))
df <- df %>% select(day,confirms,deaths,recovers,active)
plotdf <- plotdf %>% tp
return(list(df,plotdf))
}
else {
print("No data on this location yet --OR-- Type the location differently")
return(NULL)
}
# Looking for and returning a particular location
df <- data.frame()
for(i in h){
if(is_empty(df)){
df <- i %>% filter(grepl(location,i[[geopol]])) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers)
} else{
df <- df %>% rbind(i %>% filter(grepl(location,i[[geopol]])) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers))
}
}
df <- df %>% mutate(day = 1:nrow(df))
df <- df %>% select(day,confirms,deaths,recovers,active)
return(df)
}
#--Time Slice function--#
# returns data from t days ago
#
t <- function(days = 0){
return(h[[length(h)-days]])
}
#--'To Plottable' Formatting Function--#
# Takes data frames made by *Tracking Function* and
# puts them into a plottable format for ggplot
tp <- function(df){
return(df %>% pivot_longer(cols = c("confirms","deaths","recovers","active"),names_to = "Rate Type"))
}
#--Tracking Function--#
# For any un/specified location
# Requires source("pipe1.R") to be run
# Creates a day by day summary table for a given location
# returns a list( 1 data.frame with nrow = days, 1 plottable df)
#
track <- function(location = 'earth'){
countryList <- unique(union(t()[["Country/Region"]],h[[1]][["Country/Region"]]))
stateList <- unique(union(t()[["Province/State"]],h[[1]][["Province/State"]]))
geopol <- NULL
if(location %in% countryList){
geopol <- "Country/Region"
}
else if(location %in% stateList){
geopol <- "Province/State"
}
else if(location == 'earth'){
df <- data.frame()
for(i in h){
if(is_empty(df)){
df <- i %>% summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers)
} else {
df <- df %>% rbind(i %>% summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers))
}
}
df <- df %>% mutate(day = 1:nrow(df))
df <- df %>% select(day,confirms,deaths,recovers,active)
plotdf <- plotdf %>% tp
return(list(df,plotdf))
}
else {
print("No data on this location yet --OR-- Type the location differently")
return(NULL)
}
# Looking for and returning a particular location
df <- data.frame()
for(i in h){
if(is_empty(df)){
df <- i %>% filter(grepl(location,i[[geopol]])) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers)
} else{
df <- df %>% rbind(i %>% filter(grepl(location,i[[geopol]])) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms - deaths - recovers))
}
}
df <- df %>% mutate(day = 1:nrow(df))
df <- df %>% select(day,confirms,deaths,recovers,active)
return(df)
}
track()
rm(list=ls())
source('C:/Users/Anantha/R/Personal/COVID-19-Analysis/pipe1.R')
track()
rm(list=ls())
source('C:/Users/Anantha/R/Personal/COVID-19-Analysis/summaryTables.R')
View(track())
View(track() %>% tp)
track("China")
View(track("China"))
View(track("South Korea"))
rm(list = ls())
source('C:/Users/Anantha/R/Personal/COVID-19-Analysis/summaryTables.R')
#--Summary Tables--#
over1000 <- t() %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T),
active = confirms - deaths - recovers) %>%
rbind(earth[nrow(earth),]) %>% filter(confirms > 1000)
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
# On Earth
earth <- track()
source('C:/Users/Anantha/R/Personal/COVID-19-Analysis/summaryTables.R')
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
# On Earth
earth <- track()
#--Summary Tables--#
over1000 <- t() %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T),
active = confirms - deaths - recovers) %>%
rbind(earth[nrow(earth),]) %>% filter(confirms > 1000)
View(earth)
#--Summary Tables--#
over1000 <- t() %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T),
active = confirms - deaths - recovers) %>%
rbind(earth[nrow(earth),-1]) %>% filter(confirms > 1000)
earth[nrow(earth),-1]
list(Country/Region = "Worldwide",earth[nrow(earth),-1])
earth[nrow(earth),-1]
earth[nrow(earth),]
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
# Not China
notChina <- earth - track("China")
View(notChina)
notChina$day <- 1:nrow(notChina)
earthRecent <- earth[nrow(earth),]
colnames(earthRecent)[1] <- "Country/Region"
earthRecent[1,1] <- "---Worldwide Total---"
over1000 <- t() %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T),
active = confirms - deaths - recovers) %>%
rbind(earthRecent) %>% filter(confirms > 1000)
View(over1000)
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
over1000$`Country/Region`
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
inDanger <- over1000$`Country/Region`[-nrow(over1000)]
inDanger
condition_summary <- t() %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T),
active = confirms - deaths - recovers) %>%
rbind(earthRecent) %>% filter(confirms > 1000)
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
inDanger <- condition_summary$`Country/Region`[-nrow(condition_summary)]
over1000 <- list()
for(country in inDanger){
over1000[[country]] <- track(country)
}
View(over1000)
over1000$Austria %>% View()
over1000$`Korea, South` %>% View()
View(track("South Korea"))
over1000$US
over1000$US %>% View()
track("Wisconsin") %>% View()
over1000$US %>% View()
over1000$Italy %>% tp %>% ggplot(aes(x=day,color = Rate))+geom_line(aes(y= value))
over1000$Italy %>% tp %>% ggplot(aes(x=day,color = `Rate Type``))+geom_line(aes(y= value))
)
over1000$Italy %>% tp %>% ggplot(aes(x=day,color = `Rate Type`))+geom_line(aes(y= value))
condition_summary <- t() %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T),
active = confirms - deaths - recovers) %>%
rbind(earthRecent) %>% filter(confirms > 1000)
View(condition_summary)
# In China
china %>% ggplot(mapping = aes(x = day, color = `Rate Type`)) +
geom_line(mapping = aes(y = value),size = 1) +
labs(x = "Days since January 22nd 2020",
y = "Number of people",
title = "Increase in Infection, Recovery, and Mortatilty Rate in China")
# In China
inChina %>% tp %>% ggplot(mapping = aes(x = day, color = `Rate Type`)) +
geom_line(mapping = aes(y = value),size = 1) +
labs(x = "Days since January 22nd 2020",
y = "Number of people",
title = "Increase in Infection, Recovery, and Mortatilty Rate in China")
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
# In China
inChina <- track("China")
# In China
inChina %>% tp %>% ggplot(mapping = aes(x = day, color = `Rate Type`)) +
geom_line(mapping = aes(y = value),size = 1) +
labs(x = "Days since January 22nd 2020",
y = "Number of people",
title = "Increase in Infection, Recovery, and Mortatilty Rate in China")
# In US
p <- track("US")[[2]] %>% ggplot(mapping = aes(x = day,color = `Rate Type`))
p + geom_line(mapping = aes(y = value),size = 1) +
labs(x = "Days since January 22nd 2020",
y = "Number of people",
title = "Increase in Infection, Recovery, and Mortatilty Rate in US")
# In US
p <- track("US")[[2]] %>% ggplot(mapping = aes(x = day,color = `Rate Type`))
# In US
p <- track("US")[[2]] %>% ggplot(mapping = aes(x = day,color = `Rate Type`))
p + geom_line(mapping = aes(y = value),size = 1) +
labs(x = "Days since January 22nd 2020",
y = "Number of people",
title = "Increase in Infection, Recovery, and Mortatilty Rate in US")
# In US
p <- track("US")[[2]] %>% ggplot(mapping = aes(x = day,color = `Rate Type`))
# In US
p <- track("US") %>% tp %>% ggplot(mapping = aes(x = day,color = `Rate Type`))
p + geom_line(mapping = aes(y = value),size = 1) +
labs(x = "Days since January 22nd 2020",
y = "Number of people",
title = "Increase in Infection, Recovery, and Mortatilty Rate in US")
p + geom_line(mapping = aes(y = log(value)),size = 1) +
labs(x = "Days since January 22nd 2020",
y = "Log Number of people",
title = "Increase in Infection, Recovery, and Mortatilty Rate in US")
# In Wisconsin
track("Wisconsin") %>% tp %>% ggplot(mapping = aes(x = day, color = `Rate Type`)) +
geom_line(mapping = aes(y = (value)),size= 1) +
labs(x = "Days since January 22nd 2020",
y = "Number of people",
title = "Increase in Infection,Recovery, and Mortality Rate in Wisconsin")
# In Iran
over1000$Iran %>% tp %>% ggplot(mapping = aes(x = day, color = `Rate Type`)) +
geom_line(mapping = aes(y = (value)),size= 1) +
labs(x = "Days since January 22nd 2020",
y = "Number of people",
title = "Increase in Infection,Recovery, and Mortality Rate in Iran")
# In Italy
over1000$Italy %>% tp %>% ggplot(mapping = aes(x = day,color = `Rate Type`)) +
geom_line(mapping = aes(y = value),size = 1) +
labs(x = "Days since January 22nd 2020",
y = "Number of people",
title = "Increase in Infection, Recovery, and Mortatilty Rate in Italy")
earth %>% tp %>% ggplot(mapping = aes(x = day,y = value)) +
geom_line(mapping = aes(color = `Rate Type`),size = 1) +
labs(x = "Days since January 22nd 2020",
y = "Number of people",
title = "Increase in Infection, Recovery, and Mortatilty Rate Worldwide")
condition_summary <- t(0) %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T),
active = confirms - deaths - recovers) %>%
rbind(earthRecent) %>% filter(confirms > 1000)
View(condition_summary)
