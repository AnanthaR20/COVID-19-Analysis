recovers = sum(Recovered,na.rm = T)) %>%
mutate(active = confirms-deaths-recovers) %>% rbind(earth[nrow(earth),-1])
#Active Cases
h[[length(h)]] %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
rbind(earth[nrow(earth),-1]) %>%  mutate(active = confirms-deaths-recovers) %>%
filter(confirms > 1000) %>% View
#Active Cases
h[[length(h)]] %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
rbind(list("Earth",earth[nrow(earth),-1])) %>%  mutate(active = confirms-deaths-recovers) %>%
filter(confirms > 1000) %>% View
earth[nrow(earth),-1]
earth[nrow(earth),]
#Active Cases
h[[length(h)]] %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
rbind(list(earth[nrow(earth),])) %>%  mutate(active = confirms-deaths-recovers) %>%
filter(confirms > 1000) %>% View
#Active Cases
h[[length(h)]] %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
rbind(earth[nrow(earth),]) %>%  mutate(active = confirms-deaths-recovers) %>%
filter(confirms > 1000) %>% View
colnames(earthRecent)[1]
#Active Cases
earthRecent <- earth[nrow(earth)]
colnames(earthRecent)[1]
#Active Cases
earthRecent <- earth[nrow(earth),]
colnames(earthRecent)[1]
earthRecent[1,1]
h[[length(h)]] %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
rbind(earthRecent) %>%  mutate(active = confirms-deaths-recovers) %>%
filter(confirms > 1000) %>% View
colnames(earthRecent)[1] <- "Country/Region"
earthRecent[1,1] <- "Earth"
h[[length(h)]] %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
rbind(earthRecent) %>%  mutate(active = confirms-deaths-recovers) %>%
filter(confirms > 1000) %>% View
#Active Cases
earthRecent <- earth[nrow(earth),]
colnames(earthRecent)[1] <- "Country/Region"
earthRecent[1,1] <- "---Worldwide---"
h[[length(h)]] %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
rbind(earthRecent) %>%  mutate(active = confirms-deaths-recovers) %>%
filter(confirms > 1000) %>% View
summarySoFar <- h[[length(h)]] %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
rbind(earthRecent) %>%  mutate(active = confirms-deaths-recovers) %>%
filter(confirms > 1000)
#Active Cases
earthRecent <- earth[nrow(earth),]
colnames(earthRecent)[1] <- "Country/Region"
earthRecent[1,1] <- "---Worldwide Total---"
summarySoFar <- h[[length(h)]] %>% group_by(`Country/Region`) %>%
summarize(confirms = sum(Confirmed,na.rm = T),
deaths = sum(Deaths,na.rm = T),
recovers = sum(Recovered,na.rm = T)) %>%
rbind(earthRecent) %>%  mutate(active = confirms-deaths-recovers) %>%
filter(confirms > 1000)
print(str_c("As of:  ", date()))
# print(str_c("Worldwide = ", earth[['confirms']][[nrow(earth)]]," cases-------One Week Ago = ",earth[['confirms']][[nrow(earth)-7]]))
# print(str_c("China = ",earth[['confirms']][[nrow(earth)]] - notChina[['confirms']][[nrow(notChina)]]," cases-------One Week Ago = ",earth[['confirms']][[nrow(earth)-7]] - notChina[['confirms']][[nrow(notChina)-7]]))
# print(str_c("Italy = ", inItaly[['confirms']][[nrow(earth)]]," cases-------One Week Ago = ",inItaly[['confirms']][[nrow(inItaly)-7]]))
# print(str_c("US = ", inUS[['confirms']][[nrow(earth)]]," cases-------One Week Ago = ",inUS[['confirms']][[nrow(inUS)-7]]))
summarySoFar
source('~/.active-rstudio-document')
library(data.table)
library(tidyverse)
source('~/.active-rstudio-document')
data<-read.csv("data.csv")
attach(data)
colnames(data)[1] <- "NumVals"
#install.packages("ggplot2")
library(ggplot2)
ggplot(data, aes(x=Type, y=NumVals)) +
geom_boxplot(fill='aquamarine3', color="aquamarine4")
x.c = data[data$Type == 'Control',1]
y.t = data[data$Type == 'Treatment',1]
ttest<-t.test(x.c,y.t)
ttest
treatt.test = function(data){
x.c = data[data$Type == 'Control',1]  # Split into linseed
y.t = data[data$Type == 'Treatment',1] # and soybean
abs(t.test(x.c,y.t)$statistic)  # The absolute value
}
treatt.test(data)
set.seed(24)
nper = 1000          # Number of permutations
t.per = rep(0,1000)
temp.data = data         # Store a version of Z that we
# can change around.
for(i in 1:nper){
I = sample(nrow(data)) # Generate a random permutation.
temp.data[,2] = data[I,2]
t.per[i] = treatt.test(temp.data)
}
t.obs = treatt.test(data)
x.per<-sample(8)
hist(t.per,freq = FALSE,col="cyan2", main="Distribution of the observed t values:t0",xlab="t0");abline(v=t.obs, col="red", lwd=2)
t.values <- seq(-4,4,length=999)
lines(t.values,dt(t.values,df=23.3),col="chartreuse4",lwd=2)
grid(nx=NA,ny=NULL,lty=1,lwd=1,col="gray")
arrows(1.6,0.6,t.obs,0.5, length = 0.07, code = , angle = 45, lty=1, lwd=2,col="red")
text(x=1.7,y=0.6, labels = "t.obs=1.324556", adj = 0,offset = 2, cex = 0.7, col = "red", font = NULL)
arrows(2,0.3,1.7,0.1, length = 0.07, code = , angle = 45, lty=1, lwd=2,col="chartreuse4")
text(x=2.1,y=0.3, labels = "t.density", adj = 0,offset = 2, cex = 0.7, col = "chartreuse4", font = NULL)
chickwts<-read.csv("chickwts.csv")
attach(chickwts)
#install.packages("ggplot2")
library(ggplot2)
ggplot(chickwts, aes(x=feed, y=weight)) +
geom_boxplot(fill='aquamarine3', color="aquamarine4")
Z = chickwts[chickwts$feed=='horsebean'|chickwts$feed=='soybean',]
x.wlin = Z[Z$feed=='horsebean',1]
y.wsoy = Z[Z$feed=='soybean',1]
ttest<-t.test(x.wlin,y.wsoy)
ttest
chickt.test = function(Z){
x.wlin = Z[Z$feed=='horsebean',1]  # Split into linseed
y.wsoy = Z[Z$feed=='soybean',1]  # and soybean
abs(t.test(x.wlin,y.wsoy)$statistic)  # The absolute value
}
chickt.test(Z)
set.seed(24)
nper = 1000          # Number of permutations
t.per = rep(0,1000)
temp.Z = Z            # Store a version of Z that we
# can change around.
for(i in 1:nper){
I = sample(nrow(Z)) # Generate a random permutation.
temp.Z[,2] = Z[I,2]
t.per[i] = chickt.test(temp.Z)
}
t.obs = chickt.test(Z)
x.per<-sample(8)
hist(t.per,freq = FALSE,col="cyan2", main="Distribution of the observed t values:t0",xlab="t0");abline(v=t.obs, col="red", lwd=2)
t.values <- seq(-4,4,length=999)
lines(t.values,dt(t.values,df=23.3),col="chartreuse4",lwd=2)
grid(nx=NA,ny=NULL,lty=1,lwd=1,col="gray")
arrows(1.6,0.6,t.obs,0.5, length = 0.07, code = , angle = 45, lty=1, lwd=2,col="red")
text(x=1.7,y=0.6, labels = "t.obs=1.324556", adj = 0,offset = 2, cex = 0.7, col = "red", font = NULL)
arrows(2,0.3,1.7,0.1, length = 0.07, code = , angle = 45, lty=1, lwd=2,col="chartreuse4")
text(x=2.1,y=0.3, labels = "t.density", adj = 0,offset = 2, cex = 0.7, col = "chartreuse4", font = NULL)
yt <- c()
for(i in 1:100){
a <- rnorm(1,0,1)
yt[i] <- a
}
yt
source('C:/Users/Anantha/R/Class/Time Series (349)/Models/Random_Walk.R')
plot(yt)
abline(0,0)
library(ggplot2)
source('C:/Users/Anantha/R/Class/Time Series (349)/Models/Random_Walk.R')
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line()
source('C:/Users/Anantha/R/Class/Time Series (349)/Models/Random_Walk.R')
source('C:/Users/Anantha/R/Class/Time Series (349)/Models/Random_Walk.R')
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line()
source('C:/Users/Anantha/R/Class/Time Series (349)/Models/Random_Walk.R')
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line()
source('C:/Users/Anantha/R/Class/Time Series (349)/Models/Random_Walk.R')
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line()
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line() +
geom_abline(slope = 0,intercept = 0)
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line(color = 'red') +
geom_abline(slope = 0,intercept = 0)
mean(yt)
mean(yt[1:75])
source('C:/Users/Anantha/R/Class/Time Series (349)/Models/Random_Walk.R')
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line(color = 'red') +
geom_abline(slope = 0,intercept = 0)
mean(yt)
source('C:/Users/Anantha/R/Class/Time Series (349)/Models/Random_Walk.R')
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line(color = 'red') +
geom_abline(slope = 0,intercept = 0)
source('C:/Users/Anantha/R/Class/Time Series (349)/Models/Random_Walk.R')
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line(color = 'red') +
geom_abline(slope = 0,intercept = 0)
source('C:/Users/Anantha/R/Class/Time Series (349)/Models/Random_Walk.R')
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line(color = 'red') +
geom_abline(slope = 0,intercept = 0)
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line(color = 'red') +
geom_abline(slope = 0,intercept = 0) +
gome_abline(slope = 0,intercept = sd(yt))
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line(color = 'red') +
geom_abline(slope = 0,intercept = 0) +
geom_abline(slope = 0,intercept = sd(yt))
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line(color = 'red') +
geom_abline(slope = 0,intercept = 0) +
geom_abline(slope = 0,intercept = sd(yt)) +
geom_abline(slope = 0,intercept = -sd(yt))
source('C:/Users/Anantha/R/Class/Time Series (349)/Models/Random_Walk.R')
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line(color = 'red') +
geom_abline(slope = 0,intercept = 0) +
geom_abline(slope = 0,intercept = sd(yt)) +
geom_abline(slope = 0,intercept = -sd(yt))
source('C:/Users/Anantha/R/Class/Time Series (349)/Models/Random_Walk.R')
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line(color = 'red') +
geom_abline(slope = 0,intercept = 0) +
geom_abline(slope = 0,intercept = sd(yt)) +
geom_abline(slope = 0,intercept = -sd(yt))
source('C:/Users/Anantha/R/Class/Time Series (349)/Models/Random_Walk.R')
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line(color = 'red') +
geom_abline(slope = 0,intercept = 0) +
geom_abline(slope = 0,intercept = sd(yt)) +
geom_abline(slope = 0,intercept = -sd(yt))
library(ggplot2)
t <- 1:1000
yt <- c()
a <- rnorm(1,0,1)
for(i in t){
yt[i] <- (rnorm(1,0,1) - a)/2
a <- (2*yt[i]) + a
}
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line(color = 'red') +
geom_abline(slope = 0,intercept = 0) +
geom_abline(slope = 0,intercept = sd(yt)) +
geom_abline(slope = 0,intercept = -sd(yt))
source('C:/Users/Anantha/R/Class/Time Series (349)/Models/Moving_Average.R')
ggplot(data = NULL,aes(x = t, y = yt))+
geom_line(color = 'red') +
geom_abline(slope = 0,intercept = 0) +
geom_abline(slope = 0,intercept = sd(yt)) +
geom_abline(slope = 0,intercept = -sd(yt))
mean(yt)
var(yt)
f <- c(1,0,1,1,0,0,0,0)
b <- c(0,1,1,0,1,0,0,0)
corr(f,b)
cor(f,b)
1/15
lm(b~f)->model
summary(model)
plot(b~f)
plot(b~f)
abline(model)
cov(f,b)
1/64
cov(f)
cov(b,f)
summary(model)
5 *0.99
0.4/0.5
setwd("C:/Users/Anantha/R/Personal/COVID-19-Analysis")
source('C:/Users/Anantha/R/Personal/COVID-19-Analysis/setup/pipe1.R')
View(t())
track("Italy") %>% tp %>% ggplot(aes(x= date, y= value)) + geom_line(aes(color = `Rate Type`))
track("Italy") %>% tp %>%filter(`Rate Type` == "incidence") %>%  ggplot(aes(x= date, y= value)) + geom_line(aes(color = `Rate Type`))
track("Italy") %>% tp %>%filter(`Rate Type` == "incidence" | `Rate Type` == "confirms") %>%  ggplot(aes(x= date, y= value)) + geom_line(aes(color = `Rate Type`))
track("Italy") %>% tp %>%filter(`Rate Type` == "incidence" | `Rate Type` == "active") %>%  ggplot(aes(x= date, y= value)) + geom_line(aes(color = `Rate Type`))
track("Italy") %>% tp %>%filter(`Rate Type` == "incidence" | `Rate Type` == "active") %>%  ggplot(aes(x= date, y= log(value))) + geom_line(aes(color = `Rate Type`))
track("Italy") %>% tp %>%filter(`Rate Type` == "incidence" | `Rate Type` == "confirms") %>%  ggplot(aes(x= date, y= log(value))) + geom_line(aes(color = `Rate Type`))
track("Italy") %>% tp %>%filter(`Rate Type` == "incidence" | `Rate Type` == "confirms") %>%  ggplot(aes(x= date, y= value)) + geom_line(aes(color = `Rate Type`))
track("Italy") %>% tp %>%filter(`Rate Type` == "incidence") %>%  ggplot(aes(x= date, y= value)) + geom_line(aes(color = `Rate Type`))
track("Italy") %>% tp %>%filter(`Rate Type` == "incidence") %>%  ggplot(aes(x= date, y= value)) + geom_line(aes(color = `Rate Type`))+geom_abline(slope = 0,intercept = 5000)
track("US") %>% tp %>%filter(`Rate Type` == "incidence") %>%  ggplot(aes(x= date, y= value)) + geom_line(aes(color = `Rate Type`))+geom_abline(slope = 0,intercept = 5000)
View(track("US"))
track("US") %>% ggplot(aes(x= confirms, y= incidence)) + geom_line()
track("US") %>% ggplot(aes(x= confirms, y= incidence)) + geom_line() + geom_smooth
track("US") %>% ggplot(aes(x= confirms, y= incidence)) + geom_line() + geom_smooth(method = 'lm')
us <- track("US")
model <- lm(incidence~confirms,data = us)
summary(model)
model1 <- lm(incidence[(length(us)-7):length(us)]~confirms[(length(us)-7):length(us)],data = us)
summary(model1)
track("US") %>% ggplot(aes(x= confirms, y= incidence)) + geom_line() + geom_abline(model1)
track("US") %>% ggplot(aes(x= confirms, y= incidence)) + geom_line() + geom_abline(aes(model1))
track("US") %>% ggplot(aes(x= confirms, y= incidence)) + geom_line() + geom_abline((model1))
track("US") %>% ggplot(aes(x= confirms, y= incidence)) + geom_line() + geom_abline(slope = model1$coefficients[2],intercept = model1$coefficients[1])
track("US") %>% ggplot(aes(x= confirms, y= incidence)) + geom_line() + geom_abline(slope = model1$coefficients[2],intercept = model1$coefficients[1],color = 'red')
track("US") %>% ggplot(aes(x= confirms, y= incidence)) + geom_line() + geom_abline(slope = model1$coefficients[[2]],intercept = model1$coefficients[[1]],color = 'red')
?arima.sim
arima.sim(list(1,0,0))
arima.sim(list(1,0,0),n = 30)
arima.sim(list(1,0,0),ar = 0.05,n = 30)
arima.sim(list(order = c(1,0,0),ar = 0.05),n = 30)
arima.sim(list(order = c(1,0,0),ar = 0.5),n = 30)
yt <- arima.sim(list(order = c(1,0,0),ar = 0.5),n = 30)
yt
yt
x <- arima.sim(n =  30, model = list(ar = 0.5))
x
x <- arima.sim(n =  30, model = list(ma = 0.5))
x
x <- arima.sim(n =  30, model = list(i = 0.5))
x
x <- arima.sim(n =  30, model = list(ar = 0.5))
x <- arima.sim(n =  30, model = list(ddr = 0.5))
x
yt <- arima.sim(n =  30, model = list(ar = 0.5))
arima(yt, order = c(1,0,0))
arima(yt, order = c(1,0,0))
fit <- arima(yt, order = c(1,0,0))
plot(residuals(fit))
yt <- arima.sim(n =  30, model = list(ar = 1.5))
yt <- arima.sim(n =  30, model = list(ar = 0.99))
fit <- arima(yt, order = c(1,0,0))
fit
yt <- arima.sim(n =  30, model = list(ar = 0.99))
fit <- arima(yt, order = c(1,0,0))
summary(fit)
yt <- arima.sim(n =  30, model = list(ar = 0.99))
yt
class(yt)
fit <- arima(yt, order = c(1,0,0))
fit
yt <- arima.sim(n =  1000, model = list(ar = 0.99))
fit <- arima(yt, order = c(1,0,0))
fit
yt <- arima.sim(n =  1000, model = list(ar = 0.19))
fit <- arima(yt, order = c(1,0,0))
fit
yt <- arima.sim(n =  1000, model = list(ar = 0.19))
fit <- arima(yt, order = c(1,0,0))
fit
yt <- arima.sim(n =  10000, model = list(ar = 0.19))
fit <- arima(yt, order = c(1,0,0))
fit
yt <- arima.sim(n =  30, model = list(ar = 0.50))
fit <- arima(yt, order = c(1,0,0))
plot(residuals(fit))
N <- 30
yt <- arima.sim(n =  N, model = list(ar = 0.50))
fit <- arima(yt, order = c(1,0,0))
plot(residuals(fit))
N <- 30
yt <- arima.sim(n =  N, model = list(ar = 0.50))
fit <- arima(yt, order = c(1,0,0))
ggplot() + geom_line(mapping = aes(x = 1:N,y = residuals(fit))) +
geom_abline(intercept = 0, slope = 0)
plot(residuals(fit))
N <- 30
yt <- arima.sim(n =  N, model = list(ar = 0.50))
fit <- arima(yt, order = c(1,0,0))
ggplot() + geom_line(mapping = aes(x = 1:N,y = residuals(fit))) +
geom_abline(intercept = 0, slope = 0) +
labs(x = "Time", y = "Residuals of the AR fit model")
stndresid <- residuals(fit)/sd(residuals(fit))
stndresid
residuals(fit)
qqnorm(stndresid)
acf(residuals(fit))
Box.test(yt,type = "Ljung-Box")
Box.test(yt, lag = 8, type = "Ljung-Box")
plot(yt)
Box.test(yt, lag = 8, type = "Ljung-Box")
Box.test(yt, lag = 1, type = "Ljung-Box")
N <- 30
yt <- arima.sim(n =  N, model = list(ar = 0.50))
fit <- arima(yt, order = c(1,0,0))
ggplot() + geom_line(mapping = aes(x = 1:N,y = residuals(fit))) +
geom_abline(intercept = 0, slope = 0) +
labs(x = "Time", y = "Residuals of the AR fit model")
stndresid <- residuals(fit)/sd(residuals(fit))
qqnorm(stndresid)
acf(residuals(fit))
acf(residuals(fit))
acf(fit)
acf(yt)
Box.test(yt, lag = 8, type = "Ljung-Box")
Box.test(yt, lag = 8, type = "Ljung-Box")
Box.test(yt, lag = 8, type = "Ljung-Box")
N <- 30
yt <- arima.sim(n =  N, model = list(ar = 0.50))
fit <- arima(yt, order = c(1,0,0))
ggplot() + geom_line(mapping = aes(x = 1:N,y = residuals(fit))) +
geom_abline(intercept = 0, slope = 0) +
labs(x = "Time", y = "Residuals of the AR fit model")
stndresid <- residuals(fit)/sd(residuals(fit))
qqnorm(stndresid)
acf(residuals(fit))
#acf(yt)
Box.test(yt, lag = 8, type = "Ljung-Box")
Box.test(yt, lag = 8, type = "Ljung-Box")
N <- 30
yt <- arima.sim(n =  N, model = list(ar = 0.50))
fit <- arima(yt, order = c(1,0,0))
ggplot() + geom_line(mapping = aes(x = 1:N,y = residuals(fit))) +
geom_abline(intercept = 0, slope = 0) +
labs(x = "Time", y = "Residuals of the AR fit model")
stndresid <- residuals(fit)/sd(residuals(fit))
qqnorm(stndresid)
acf(residuals(fit))
#acf(yt)
Box.test(yt, lag = 8, type = "Ljung-Box")
Box.test(yt, lag = 8, type = "Ljung-Box")
rm(list = ls())
N <- 30
yt <- arima.sim(n =  N, model = list(ar = 0.50))
fit <- arima(yt, order = c(1,0,0))
ggplot() + geom_line(mapping = aes(x = 1:N,y = residuals(fit))) +
geom_abline(intercept = 0, slope = 0) +
labs(x = "Time", y = "Residuals of the AR fit model")
stndresid <- residuals(fit)/sd(residuals(fit))
qqnorm(stndresid)
acf(residuals(fit))
#acf(yt)
Box.test(yt, lag = 8, type = "Ljung-Box")
library(TSA)
data("hare")
fit <- arima(hare,order = c(3,0,0))
fit
ggplot() + geom_line(mapping = aes(x = time(hare),y = residuals(fit))) +
geom_abline(intercept = 0, slope = 0) +
labs(x = "Time", y = "Residuals of the AR fit model")
ggplot() + geom_line(mapping = aes(x = time(yt),y = residuals(fit))) +
geom_abline(intercept = 0, slope = 0) +
labs(x = "Time", y = "Residuals of the AR fit model")
ggplot() + geom_line(mapping = aes(x = time(yt),y = residuals(fit))) +
geom_abline(intercept = 0, slope = 0) +
labs(x = "Time", y = "Residuals of the AR fit model")
ggplot() + geom_line(mapping = aes(x = time(hare),y = residuals(fit))) +
geom_abline(intercept = 0, slope = 0) +
labs(x = "Time", y = "Residuals of the AR fit model")
acf(residuals(fit))
Box.test(hare, lag = 9, type = "Ljung-Box")
ggplot() + geom_line(mapping = aes(x = 1:N,y = residuals(fit))) +
geom_abline(intercept = 0, slope = 0) +
labs(x = "Time", y = "Residuals of the AR fit model")
N <- 30
yt <- arima.sim(n =  N, model = list(ar = 0.50))
fit <- arima(yt, order = c(1,0,0))
ggplot() + geom_line(mapping = aes(x = 1:N,y = residuals(fit))) +
geom_abline(intercept = 0, slope = 0) +
labs(x = "Time", y = "Residuals of the AR fit model")
library(TSA)
data("hare")
fit <- arima(hare,order = c(3,0,0))
ggplot() + geom_line(mapping = aes(x = time(hare),y = residuals(fit)))+
geom_abline(intercept = 0, slope = 0) +
labs(x = "Time", y = "Residuals of the AR fit model")
acf(residuals(fit))
Box.test(hare, lag = 9, type = "Ljung-Box")
runs(residuals(fit))
runs(rnorm(100))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs(rnorm(1000))
runs.test(residuals(fit))
runs(residuals(fit))
?runs
qqnorm(residuals(fit))
shapiro.test(hare)
?wilk
shapiro.test(residuals(fit))
track("US")
source('C:/Users/Anantha/R/Personal/COVID-19-Analysis/setup/pipe1.R')
track("US")
View(track("US"))
View(track("China"))
View(track("US"))
View(track(55079))
View(t)
View(t())
View(t(1))
View(track("Wisconsin"))
View(track("New York"))
