plot.ecdf(x=t.3, lwd=2,panel.first=grid(),ylab="Fest",xlab="x",col="blue",main="",
verticals = FALSE,do.p=FALSE)
abline(h=c(0,1))
curve(expr=pgamma(q=x,shape=(n-1)/2,scale=2*sigma^2/(n-1)),add=TRUE,col="red")
legend(x=5,y=0.5,legend=c("CDF","EDF"),bty="n",lty=1,col=c("red","blue"))
hist(x=t.3, freq=FALSE,main="", col="blue",ylim=c(0,0.3))
curve(expr=dgamma(x=x,shape=(n-1)/2,scale=2*sigma^2/(n-1)),add=TRUE,col="red")
legend(x=10,y=0.2,legend=c("S^2","Gamma"),bty="n",lty=1,col=c("blue","red"))
probs<-c(0.025,0.05,0.1,0.5,0.9,.975)
(q.est<-quantile(t.3,probs=probs,type=1)) # Inverse from EDF, Type=1, the agorithm used.
(q.true<-qgamma(probs,shape=(n-1)/2,scale=2*sigma^2/(n-1)))
df.quantiles<-data.frame(probs,q.est,q.true)
plot(q.est,q.true)
abline(0, 1, lty = 2, col = "red") # add 45 degree line
F.est<-ecdf(t.3) # A funtion to find estimates probabilities
F.est(q.est) # It works simmilar to pgamma function
curve(expr=x^3,c(-1,1))
par(mfrow=c(1,2))
plot.ecdf(x=t.3, lwd=2,panel.first=grid(),ylab="Fest",xlab="x",col="blue",main="",
verticals = FALSE,do.p=FALSE)
abline(h=c(0,1))
curve(expr=pgamma(q=x,shape=(n-1)/2,scale=2*sigma^2/(n-1)),add=TRUE,col="red")
legend(x=5,y=0.5,legend=c("CDF","EDF"),bty="n",lty=1,col=c("red","blue"))
hist(x=t.3, freq=FALSE,main="", col="blue",ylim=c(0,0.3))
curve(expr=dgamma(x=x,shape=(n-1)/2,scale=2*sigma^2/(n-1)),add=TRUE,col="red")
legend(x=10,y=0.2,legend=c("S^2","Gamma"),bty="n",lty=1,col=c("blue","red"))
probs<-c(0.025,0.05,0.1,0.5,0.9,.975)
(q.est<-quantile(t.3,probs=probs,type=1)) # Inverse from EDF, Type=1, the agorithm used.
(q.true<-qgamma(probs,shape=(n-1)/2,scale=2*sigma^2/(n-1)))
df.quantiles<-data.frame(probs,q.est,q.true)
plot(q.est,q.true)
abline(0, 1, lty = 2, col = "red") # add 45 degree line
F.est<-ecdf(t.3) # A funtion to find estimates probabilities
F.est(q.est) # It works simmilar to pgamma function
# Settings
B<-500
n<-10
mu<-2.713333
sigma<-2.195581
set.seed(20)
t.1<-numeric(length = B)
for (i in 1:B) {
samp<-rnorm(n=n,mean=mu, sd=sigma)
t.1[i]<-var(samp)
}
head(t.1)
hist(t.1)
(bias<-mean(t.1)-sigma^2)
# Settings
B<-500
n<-10
mu<-2.713333
sigma<-2.195581
set.seed(20)
X.sim<-matrix(data=rnorm(n=n*B,mean=mu,sd=sigma),nrow = B,ncol = n)
dim(X.sim)
# Settings
B<-500
n<-10
mu<-2.713333
sigma<-2.195581
set.seed(20)
X.sim<-matrix(data=rnorm(n=n*B,mean=mu,sd=sigma),nrow = B,ncol = n)
dim(X.sim)
s2 <- var(X.sim)
bias <- (s2 - sigma^2)
# Settings
B<-500
n<-10
mu<-2.713333
sigma<-2.195581
set.seed(20)
X.sim<-matrix(data=rnorm(n=n*B,mean=mu,sd=sigma),nrow = B,ncol = n)
dim(X.sim)
s2 <- var(X.sim)
bias <- (s2 - sigma^2)
print(bias)
# Settings
B<-500
n<-10
mu<-2.713333
sigma<-2.195581
set.seed(20)
vec <- rnorm(n=n*B,mean=mu,sd=sigma)
X.sim<-matrix(data=vec,nrow = B,ncol = n)
dim(X.sim)
s2 <- var(vec)
bias <- (s2 - sigma^2)
print(bias)
# first oberved sample
X.sim[1,]
(t1<-var(X.sim[1,]))
X.sim[2,]
(t2<-var(X.sim[2,]))
X.sim<-matrix(data=rnorm(n=n*B,mean=mu,sd=sigma),nrow = B,ncol = n)
t.2<-apply(X=X.sim, MARGIN=1, FUN = var) # MARGIN=1 by row.
# Estimated variance using the estimator
mean(t.2)
#############
X.sim<-matrix(data=rnorm(n=n*B,mean=mu,sd=sigma),nrow = B,ncol = n)
t.2<-apply(X=X.sim, MARGIN=1, FUN = var) # MARGIN=1 by row.
# Estimated variance using the estimator
mean(t.2)
(bias<-mean(t.2)-sigma^2)
# first oberved sample
X.sim[1,]
(t1<-var(X.sim[1,]))
X.sim[2,]
(t2<-var(X.sim[2,]))
X.sim<-matrix(data=rnorm(n=n*B,mean=mu,sd=sigma),nrow = B,ncol = n)
t.2<-apply(X=X.sim, MARGIN=1, FUN = var) # MARGIN=1 by row.
# Estimated variance using the estimator
mean(t.2)
#############
mean(t.2)
(bias<-mean(t.2)-sigma^2)
# first oberved sample
X.sim[1,]
t1<-var(X.sim[1,])
X.sim[2,]
t2<-var(X.sim[2,])
X.sim<-matrix(data=rnorm(n=n*B,mean=mu,sd=sigma),nrow = B,ncol = n)
t.2<-apply(X=X.sim, MARGIN=1, FUN = var) # MARGIN=1 by row.
# Estimated variance using the estimator
mean(t.2)
#############
mean(t.2)
(bias<-mean(t.2)-sigma^2)
abs(mean(t.3)-sigma^2)/sigma^2
mean(t.3)+qt(p=c(0.025,0.975),B-1)*sd(t.3)/sqrt(B)
emp<-c(3,3,2,2,5,5,5)
plot.ecdf(x=emp,lwd=2,panel.first=grid(),ylab ="Fest",xlab=emp,col="blue",main="")
plot.ecdf(x=emp,lwd=2,panel.first=grid(),ylab ="Fest",xlab=emp,col="blue",main="",verticals = FALSE,do.p=FALSE)
plot.ecdf(x=emp,lwd=2,panel.first=grid(),ylab ="Fest",xlab=emp,col="blue",main="",verticals = TRUE,do.p=TRUE)
#data
par(lend="square")
emp<-c(3,3,2,2,5,5,5)
plot.ecdf(x=t.3,lwd=2,panel.first=grid(),ylab ="Fest",xlab=t.3,col="blue",main="")
plot.ecdf(x=t.3,lwd=2,panel.first=grid(),ylab ="Fest",xlab=t.3,col="blue",main="",verticals = FALSE,do.p=FALSE)
plot.ecdf(x=t.3,lwd=2,panel.first=grid(),ylab ="Fest",xlab=t.3,col="blue",main="",verticals = TRUE,do.p=TRUE)
curve(expr=x^3,c(-1,1))
par(mfrow=c(1,2))
plot.ecdf(x=t.3, lwd=2,panel.first=grid(),ylab="Fest",xlab="x",col="blue",main="",
verticals = FALSE,do.p=FALSE)
abline(h=c(0,1))
curve(expr=pgamma(q=x,shape=(n-1)/2,scale=2*sigma^2/(n-1)),add=TRUE,col="red")
legend(x=5,y=0.5,legend=c("CDF","EDF"),bty="n",lty=1,col=c("red","blue"))
hist(x=t.3, freq=FALSE,main="", col="blue",ylim=c(0,0.3))
curve(expr=dgamma(x=x,shape=(n-1)/2,scale=2*sigma^2/(n-1)),add=TRUE,col="red")
legend(x=10,y=0.2,legend=c("S^2","Gamma"),bty="n",lty=1,col=c("blue","red"))
probs<-c(0.025,0.05,0.1,0.5,0.9,.975)
(q.est<-quantile(t.3,probs=probs,type=1)) # Inverse from EDF, Type=1, the agorithm used.
(q.true<-qgamma(probs,shape=(n-1)/2,scale=2*sigma^2/(n-1)))
df.quantiles<-data.frame(probs,q.est,q.true)
plot(q.est,q.true)
abline(0, 1, lty = 2, col = "red") # add 45 degree line
F.est<-ecdf(t.3) # A funtion to find estimates probabilities
F.est(q.est) # It works simmilar to pgamma function
# Estimated variance using the estimator
est <- mean(t.3)
std_err <- var(t.3)
confidence_interval <- (est-1.96*std_err):(est+1.96*std_err)
confidence_interval
confidence_interval <- c((est-1.96*std_err),(est+1.96*std_err))
confidence_interval
print(paste("The confidence interval is: ",confidence_interval,sep = " "))
print(paste("The confidence interval bound is: ",confidence_interval[1],confidence_interval[2],sep = " "))
print(paste("The confidence interval bound is: ",confidence_interval[1],confidence_interval[2],sep = ", "))
print(paste("The confidence interval bound is: ",confidence_interval[1],confidence_interval[2],sep = " "))
library(tidyverse)
library(data.table)
d <- fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/03-05-2020.csv")
View(d)
l <- fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-22-2020.csv")
Viewl
View(l)
yr <- 21:31
yr <- 21:31
yr
for(i in yr){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-",i,"-2020.csv")
jj[count] <- fread(url)
count <- count +1
}
for(i in yr){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-",i,"-2020.csv")
jj[count] <- fread(url)
count <- count +1
}
for(i in yr){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-",i,"-2020.csv",verbose = TRUE)
jj[count] <- fread(url)
count <- count +1
}
yr <- 23:31
for(i in yr){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-",i,"-2020.csv",verbose = TRUE)
jj[count] <- fread(url)
count <- count +1
}
jj <- list()
count <- 1
for(i in yr){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-",i,"-2020.csv",verbose = TRUE)
jj[count] <- fread(url)
count <- count +1
}
for(i in yr){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-",i,"-2020.csv",verbose = TRUE)
jj[count] <- read.csv(url)
count <- count +1
}
for(i in yr){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-",i,"-2020.csv")
print(url)
jj[count] <- read.csv(url)
count <- count +1
}
for(i in yr){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-",i,"-2020.csv")
print(url)
a <- read.csv(url)
jj[count] <- a
count <- count +1
}
for(i in yr){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-",i,"-2020.csv")
print(url)
a <- read.csv(url)
jj[[count]] <- a
count <- count +1
}
View(jj)
View(jj[1])
View(jj[[1]])
View(jj[length(jj)])
for(i in yr){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-",i,"-2020.csv")
print(url)
a <- read.csv(url)
jj[[count]] <- a
count <- count +1
}
View(jj)
l <- fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-23-2020.csv")
View(l)
jj[[1]] <- l
library(tidyverse)
library(nycflights13)
airports %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point() +
coord_quickmap()
flights
planes
airlines
airports
weather
# put your answer here.
delays <- flights %>% group_by(dest) %>% summarize(delay = mean(arr_delay,na.rm = T))
colnames(delays)[1] <- "faa"
delays <- delays %>% left_join(airports,by = 'faa')
delays %>%
ggplot(mapping = aes(x = lon,y = lat)) +
borders("state") +
geom_point(mapping = aes(color = delay)) +
coord_quickmap()
d %>% View
colnames(d)
d %>% ggplot(mapping = aes(x = `Province/State`,y = Confirmed)) +
facet_wrap(~`Country/Region`) +
geom_bar(stat = 'identity')
d %>% ggplot(mapping = aes(x = `Country/Region`,y = Confirmed)) +
facet_wrap(~`Province/State`) +
geom_bar(stat = 'identity')
d %>% ggplot(mapping = aes(x = `Country/Region`,y = Confirmed)) +
# facet_wrap(~`Province/State`) +
geom_bar(stat = 'identity')
d %>% ggplot(mapping = aes(x = `Country/Region`,y = Confirmed)) +
# facet_wrap(~`Province/State`) +
geom_bar(stat = 'identity') + coord_flip()
d %>% filter(Confirmed > 0) %>% ggplot(mapping = aes(x = `Country/Region`,y = Confirmed)) +
# facet_wrap(~`Province/State`) +
geom_bar(stat = 'identity') + coord_flip()
colnames(d)
View(d)
d %>% filter(`Country/Region` ==  "US") %>% ggplot(mapping = aes(x = `Country/Region`,y = Confirmed)) +
facet_wrap(~`Province/State`) +
geom_bar(stat = 'identity') + coord_flip()
d %>% filter(`Country/Region` ==  "US") %>% ggplot(mapping = aes(x = `Country/Region`,y = Confirmed)) +
facet_wrap(~`Province/State`) +
geom_bar(stat = 'identity')
d %>% filter(`Country/Region` ==  "US") %>% ggplot(mapping = aes(x = `Country/Region`,y = Confirmed)) +
facet_wrap(~`Province/State`) +
geom_bar(stat = 'identity')
d %>% filter(`Country/Region` ==  "US") %>% ggplot(mapping = aes(x = `Country/Region`,y = Confirmed)) +
facet_wrap(~`Province/State`) +
geom_bar(stat = 'identity') + coord_flip()
l <- list()
dd <- fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-23-2020.csv")
l[[1]] <-d
l[1]
View(l[1])
l[[1]]
View(l[[1]])
d$Deaths %>% sum
d$Confirmed %>%sum
d %>% filter(!grepl("China",`Country/Region`))
d %>% filter(!grepl("China",`Country/Region`)) %>% View()
(d %>% f)ilter(!grepl("China",`Country/Region`))[["Deaths"]] %>% sum
(d %>% filter(!grepl("China",`Country/Region`))[["Deaths"]] %>% sum
)
d %>% filter(!grepl("China",`Country/Region`)) ->a
a$Deaths %>% sum
d$Deaths %>% sum
d$Confirmed %>% sum
d$Recovered %>% sum
d$Confirmed - d$Recovered
d$Deaths
d$Deaths %>% sum
d$Confirmed %>% sum()
d$Recovered %>% sum
(d$Confirmed %>% sum()) - sum(d$Recovered)
(d$Confirmed %>% sum()) - sum(d$Recovered) - sum(d$Deaths)
40741/7000000000
40741/7000000000 *100
d %>% filter(grepl("Africa",`Country/Region`)) -> Africa
View(Africa)
d %>% filter(grepl("Others",`Country/Region`)) -> a
View(a)
d %>% filter(grepl("India",`Country/Region`))-> India
d %>% ggplot(mapping = aes(x = Longitude,y = Confirmed)) +
geom_point() +
geom_smooth(method = 'lm')
d %>% filter(grepl("India",`Country/Region`))-> India
View(India)
?download.file
setwd("C:/Users/Anantha/R/Personal/COVID-19")
day <- 22:31
library(tidyverse)
library(data.table)
for(d in day){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-",d,"-2020.csv")
print(url)
}
for(d in day){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-",d,"-2020.csv")
print(url)
h[[count]] <- fread(url)
count <- count+1
}
h <- list()
day <- 22:31
count <- 1
for(d in day){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-",d,"-2020.csv")
print(url)
h[[count]] <- fread(url)
count <- count+1
}
View(h)
h[[length(h)-1]] %>% View
h[[length(h)-1]] -> a
a$Confirmed %>% sum()
d <- fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/03-05-2020.csv")
d <- fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/03-05-2020.csv")
d$Confirmed %>% sum
(d$Confirmed %>% sum) - (a$Confirmed %>% sum())
a$Deaths %>% sum
a$Deaths %>% sum(na.rm = T)
d$Recovered %>% sum
d %>% View
day <- str_c("0",1:5)
day
day <- str_c("0",1:9,10:29)
day <- str_c("0",1:9,10:29)
day <- str_c(str_c("0",1:9),10:29)
day <- str_c(str_c("0",1:9),10:29)
daya
day
day <- str_c(day,10:29)
day
rm(day)
day <- str_c("0",1:9)
day
day <- str_c(day,10:29)
day
day <- paste(day,10:29)
day
rm(day)
day <- str_c("0",1:9)
day <- paste(day,10:29)
day
day <- c(str_c("0",1:9),10:29)
day
rm(lis=ls())
rm(list=ls())
library(tidyverse)
library(data.table)
h <- list()
day <- 22:31
count <- 1
for(d in day){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/01-",d,"-2020.csv")
print(url)
h[[count]] <- fread(url)
count <- count+1
}
day <- c(str_c("0",1:9),10:29)
for(d in day){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/02-",d,"-2020.csv")
print(url)
h[[count]] <- fread(url)
count <- count+1
}
day <- str_c("0",1:5)
for(d in day){
url <- str_c("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/03-",d,"-2020.csv")
print(url)
h[[count]] <- fread(url)
count <- count+1
}
View(h)
?sapply
?vapply
ULT <- data.frame()
is.null(ULT)
is.na(ULT)
is_empty(ULT)
for(d in h){
if(is_empty(ULT)){
ULT <- d
} else{
ULT <- ULT %>% rbind(d)
}
}
for(d in h){
if(is_empty(ULT)){
ULT <- d
} else{
ULT <- ULT %>% rbind(d,fill = T)
}
}
ULT %>% View
ULT$`Last Update`[1]
ULT$`Last Update`[1] %>% as.Date()
ULT$`Last Update`[1] %>% as.Date(format = '%d/%m/%Y')
ULT$`Last Update`[1] %>% as.character.Date()
ULT$`Last Update`[1] %>% lubridate::yday()
ULT$`Last Update`[1] %>% lubridate::ymd()
str_replace(ULT$`Last Update`,"\\\\","-")
str_replace(ULT$`Last Update`,"\\\\","-") -> ult
View(ult)
ult <- ULT
str_replace(ULT$`Last Update`,"\\\\","-") -> ult$`Last Update`
View(ult)
View(ULT)
str_replace(ULT$`Last Update`,"\\\\","-") -> ult$`Last Update`
str_replace(ULT$`Last Update`,"\\\\","-")
str_replace(ULT$`Last Update`,"/","-")
str_replace(ULT$`Last Update`,"/","-") -> ult$`Last Update`
View(ult)
str_replace_all(ULT$`Last Update`,"/","-") -> ult$`Last Update`
View(ult)
ult$`Last Update` %>% as.Date()
ult$`Last Update`[1]
ult$`Last Update`[1] %>% as.character.Date()
ult$`Last Update`[1] %>% as.character.Date() %>% class
ult$`Last Update` %>% str_remove(ult$`Last Update`," +")
ult$`Last Update` %>% str_remove(ult$`Last Update`," [+]")
ult$`Last Update` %>% str_remove(ult$`Last Update`," \+")
ult$`Last Update` %>% str_remove(ult$`Last Update`," d{2}:d{2}")
ult$`Last Update`[1] %>% as.Date(format = '%Y/%m/%d')
ULT %>% group_by(`Last Update`) %>% summarize(Confirmed = sum(Confirmed))
ULT %>% group_by(`Last Update`) %>% summarize(Confirmed = sum(Confirmed,na.rm = T))
ultsum <- ULT %>% group_by(`Last Update`) %>% summarize(Confirmed = sum(Confirmed,na.rm = T))
View(ultsum)
ULT %>% mutate(day = str_extract(ULT$`Last Update`,"d{1}/d{2}/d{4}"))
c(1,222,3,4)
c(1,222,3,4) %>% str_extract("d{3}")
a <- "fjkdjfkl"
str(a,2)
substring(a,1,4)
ULT <- ULT %>% mutate(day = substring(`Last Update`,1,9))
View(ULT)
ultsum <- ULT %>% group_by(day) %>% summarize(Confirmed = sum(Confirmed,na.rm = T))
View(ultsum)
ultsum %>% ggplot(mapping = aes(x = day, y = Confirmed)) +
geom_point()
ultsum <- ULT %>% group_by(`Last Update`) %>% summarize(Confirmed = sum(Confirmed,na.rm = T))
ultsum %>% ggplot(mapping = aes(x = day, y = Confirmed)) +
geom_point()
ultsum %>% View
ultsum %>% ggplot(mapping = aes(x = `Last Update`, y = Confirmed)) +
geom_point()
View(ULT)
ULT %>% filter(`Country/Region` == "Italy")
ULT %>% filter(`Country/Region` == "Italy") -> italy
ULT
italy %>% group_by(`Last Update`) %>% summarize(confirm = sum(Confirmed))
i <- italy %>% group_by(`Last Update`) %>% summarize(confirm = sum(Confirmed))
View(i)
i %>% ggplot(aes(x = `Last Update`,y =confirm)) + geom_point()
i %>% ggplot(aes(x = `Last Update`,y =confirm)) + geom_point() + geom_smooth(method = 'glm')
i %>% ggplot(aes(x = `Last Update`,y =confirm)) + geom_point() + geom_smooth(method = 'glm')
i <- i %>% mutate(pop = 60.48*10^6)
i <- i %>% mutate(poprop = confirm/60.48*10^6)
i <- i %>% mutate(poprop = confirm/(60.48*10^6)*100)
i %>% ggplot(aes(x = `Last Update`,y =confirm)) + geom_point()
i %>% ggplot(aes(x = `Last Update`,y =poprop)) + geom_point()
